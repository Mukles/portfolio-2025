---
type Props = {
  namespace: string;
  title: string;
};

import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import TWSizeIndicator from "@/components/TWSizeIndicator.astro";
import "@/src/styles/main.css";
import PageTransition from "../components/PageTransition.astro";
const { namespace, title } = Astro.props as Props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <TWSizeIndicator />
    <PageTransition />
    <Header />
    <div data-barba="wrapper">
      <main data-barba="container" data-barba-namespace={namespace}>
        <slot />
      </main>
    </div>
    <Footer />
  </body>
</html>

<script>
  import barba from "@barba/core";
  import gsap from "gsap";

  document.addEventListener("DOMContentLoaded", () => {
    const pageTransition = document.querySelector(".page-transition");
    const circles = document.querySelectorAll(".circle");

    gsap.set(pageTransition, {
      opacity: 0,
      visibility: "hidden",
    });

    gsap.set(circles, {
      opacity: 0,
      scale: 0.5,
    });
  });

  function afterPageLoad() {
    const pageTransition = document.querySelector(".page-transition");
    const circles = document.querySelectorAll(".circle");

    return new Promise((resolve) => {
      const tl = gsap.timeline({
        defaults: { ease: "power3.inOut", duration: 0.6 },
        onComplete: resolve,
      });

      tl.to(circles, {
        scale: 0.3,
        opacity: 0,
        stagger: {
          each: 0.1,
          from: "end",
        },
      }).to(
        pageTransition,
        {
          opacity: 0,
          visibility: "hidden",
        },
        "-=0.3"
      );
    });
  }

  function onRouteChange() {
    const pageTransition = document.querySelector(".page-transition");
    const circles = document.querySelectorAll(".circle");
    return new Promise((resolve) => {
      const tl = gsap.timeline({
        defaults: { ease: "power3.out", duration: 0.6 },
        onComplete: resolve,
      });

      tl.set(pageTransition, { visibility: "visible" })
        .to(pageTransition, { opacity: 1, duration: 0.2 })
        .to(circles, {
          opacity: 1,
          scale: 1,
          stagger: 0.1,
        });
    });
  }

  barba.init({
    transitions: [
      {
        async leave(data) {
          await onRouteChange();
          await gsap.to(data.current.container, {
            opacity: 0,
            y: 0,
            duration: 0.3,
          });
        },
        async enter(data) {
          const audio = new Audio("sounds/page-transition-out.mp3");
          audio.volume = 0.4;
          audio.play().catch(() => {}); // Prevent promise errors
          await afterPageLoad();
          gsap.from(data.next.container, {
            opacity: 0,
            y: "120",
            duration: 0.2,
          });
          ScrollTrigger.refresh();
        },
      },
    ],
  });
</script>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import SplitType from "split-type";

  document.addEventListener("DOMContentLoaded", () => {
    gsap.registerPlugin(ScrollTrigger);

    // Select all elements with .split-lines
    document.querySelectorAll(".split-lines").forEach((el) => {
      // Split the current element into lines
      const split = new SplitType(el as HTMLElement, {
        types: "lines",
        lineClass: "line",
        tagName: "span",
      });

      // Wrap each line in a div for overflow/animation
      split.lines?.forEach((line) => {
        const wrapper = document.createElement("div");
        wrapper.classList.add("line-wrap");
        line.parentNode?.insertBefore(wrapper, line);
        wrapper.appendChild(line);
      });

      // Animate each set of lines independently with ScrollTrigger
      gsap.from(split.lines, {
        y: "100%",
        duration: 0.8,
        stagger: 0.05,
        ease: "power2.out",
        scrollTrigger: {
          trigger: el,
          start: "top 90%",
          toggleActions: "play none none reset",
        },
      });
    });
  });
</script>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener("DOMContentLoaded", () => {
    const staggerRevealContainers =
      document.querySelectorAll(".stagger-reveal");

    staggerRevealContainers.forEach((container) => {
      const children = container.children;
      gsap.from(children, {
        y: "100%",
        opacity: 0,
        duration: 1,
        stagger: 0.2,
        ease: "power2.out",
        scrollTrigger: {
          trigger: container,
          start: "top 80%",
          toggleActions: "play none none reset",
        },
      });
    });
  });
</script>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);
  document.addEventListener("DOMContentLoaded", () => {
    const revealElements = document.querySelectorAll(".element-reveal");
    revealElements.forEach((element) => {
      gsap.from(element, {
        y: "40",
        opacity: 0,
        duration: 0.7,
        ease: "power3.inOut",
        scrollTrigger: {
          trigger: element,
          start: "top 80%",
          toggleActions: "play none none reset",
        },
      });
    });
  });
</script>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);
  document.addEventListener("DOMContentLoaded", () => {
    const balls = document.querySelectorAll(".ball-reveal");
    balls.forEach((ball) => {
      gsap.from(ball, {
        scale: 0.5,
        rotate: 30,
        opacity: 0,
        duration: 0.7,
        ease: "power2.inOut",
        scrollTrigger: {
          trigger: ball,
          toggleActions: "play none none reset",
        },
      });
    });
  });
</script>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener("DOMContentLoaded", () => {
    const scrollContainer = document.querySelector(".scroll-container");

    // Ensure the element exists before applying GSAP
    if (scrollContainer) {
      gsap.to(scrollContainer, {
        y: () => window.innerHeight * 0.5,
        ease: "power1.inOut",
        scrollTrigger: {
          trigger: scrollContainer,
          start: "top top",
          end: "bottom top",
          scrub: 1,
          markers: false,
          invalidateOnRefresh: true,
          onUpdate: (self) => {
            console.log("Scroll progress:", self.progress);
          },
        },
      });
    } else {
      console.warn("Scroll container not found!");
    }
  });
</script>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".item-img").forEach((img) => {
      gsap.to(img, {
        yPercent: -18,
        ease: "none",
        scrollTrigger: {
          trigger: img,
          start: "top bottom", // when image top hits bottom of viewport
          end: "bottom top", // when image bottom hits top of viewport
          scrub: true, // link animation progress to scroll
        },
      });
    });
  });
</script>
