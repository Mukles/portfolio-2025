---
type Props = {
  namespace: string;
  title: string;
};

import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import TWSizeIndicator from "@/components/TWSizeIndicator.astro";
import "@/src/styles/main.css";
import PageTransition from "../components/PageTransition.astro";
const { namespace, title } = Astro.props as Props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <TWSizeIndicator />
    <PageTransition />
    <Header />
    <div data-barba="wrapper">
      <main data-barba="container" data-barba-namespace={namespace}>
        <slot />
      </main>
    </div>
    <Footer />
  </body>
</html>

<script>
  import barba from "@barba/core";
  import gsap from "gsap";

  function pageTransitionOut() {
    const pageTransition = document.querySelector(".page-transition");
    const circles = document.querySelectorAll(".circle");
    const tl = gsap.timeline({
      defaults: { ease: "power3.out", duration: 0.6 },
    });

    return tl
      .fromTo(
        pageTransition,
        { visibility: "hidden", opacity: 0 },
        { visibility: "visible", opacity: 1 }
      )
      .fromTo(
        circles,
        {
          opacity: 0,
          scale: 0.5,
        },
        {
          opacity: 1,
          scale: 1,
          stagger: 0.1,
          duration: 0.6,
          ease: "power3.out",
        }
      );
  }

  function pageTransitionIn() {
    const pageTransition = document.querySelector(".page-transition");
    const circles = document.querySelectorAll(".circle");
    const tl = gsap.timeline({
      defaults: { ease: "power3.out", duration: 0.6 },
    });

    return tl
      .to(pageTransition, { visibility: "visible", opacity: 1 })
      .fromTo(circles, { opacity: 1, scale: 1 }, { opacity: 0, scale: 0.5 })
      .to(pageTransition, {
        opacity: 0,
        duration: 0.2,
        visibility: "hidden",
      });
  }

  barba.init({
    debug: true,
    timeout: 10000,
    transitions: [
      {
        async leave(data: { current: { container: HTMLElement } }) {
          const animation = pageTransitionOut();
          await animation.then();
          gsap.to(data.current.container, {
            opacity: 0,
            duration: 0.6,
            ease: "power3.out",
          });
        },

        async enter(data: { next: { container: HTMLElement } }) {
          const animation = pageTransitionIn();
          await animation.then();
          gsap.from(data.next.container, {
            opacity: 0,
            duration: 0.6,
            y: 100,
            ease: "power3.out",
          });
        },
      },
    ],
  });

  // nav link animation
  function initializeNavLink() {
    const navLinks = document.querySelectorAll(".nav-link");
    const currentPath = window.location.pathname;

    // First remove active class from all nav links to avoid multiple active links
    navLinks.forEach((link) => {
      const href = link.getAttribute("href");
      if (link.classList.contains("active")) {
        link.classList.remove("active");
      }
      if (
        href &&
        (href === currentPath || (href !== "/" && currentPath.startsWith(href)))
      ) {
        link.classList.add("active");
      }
    });
  }

  barba.hooks.beforeLeave(() => {
    initializeNavLink();
    ScrollTrigger.refresh();
  });

  barba.hooks.after(() => {
    initializeNavLink();
    ScrollTrigger.refresh();
  });
</script>
