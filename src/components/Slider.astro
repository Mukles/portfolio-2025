---

---

<section class="section-lg pb-28">
  <div class="container-fluid">
    <div class="bg-light rounded-[45px]">
      <div class="marquee-wrapper">
        <div class="marquee">
          <slot />
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  function createInfiniteMarquee() {
    const wrapper = document.querySelector(".marquee-wrapper");
    const marquee = document.querySelector(".marquee");

    if (!wrapper || !marquee) return;

    // Clear existing animations and setup
    gsap.killTweensOf(".marquee");
    gsap.set(".marquee", { clearProps: "all" });

    const existingClones = document.querySelectorAll(
      ".marquee:not(:first-child)"
    );
    existingClones.forEach((clone) => clone.remove());

    // Calculate and create clones
    const itemWidth = (marquee as HTMLElement).offsetWidth;
    const screenWidth = window.innerWidth;
    const numClones = Math.ceil((screenWidth * 4) / itemWidth); // Increased clone count

    for (let i = 0; i < numClones; i++) {
      const clone = marquee.cloneNode(true);
      wrapper.appendChild(clone);
    }

    // Base animation setup
    const timeline = gsap.timeline({
      repeat: -1,
      defaults: { ease: "none" },
      paused: true, // Start paused to ensure proper initialization
    });

    const elements = gsap.utils.toArray<HTMLElement>(".marquee");
    timeline.to(elements, {
      xPercent: -100,
      duration: 20, // Reduced base duration for smoother movement
      stagger: {
        each: 0,
        repeat: -1,
      },
    });

    // Start the animation after a short delay
    gsap.delayedCall(0.1, () => {
      timeline.play();
    });

    // Scroll control
    ScrollTrigger.create({
      trigger: wrapper,
      start: "top bottom",
      end: "bottom top",
      onUpdate: (self) => {
        const velocity = self.getVelocity() / 2000;
        const baseSpeed = 1;

        // Determine direction and speed
        let targetSpeed = baseSpeed;
        if (Math.abs(velocity) > 0.1) {
          targetSpeed = baseSpeed + Math.min(Math.abs(velocity), 0.5);
          targetSpeed *= velocity < 0 ? 1 : -1;
        }

        // Smooth speed transition
        gsap.to(timeline, {
          timeScale: targetSpeed,
          duration: 0.3,
          ease: "power2.out",
          overwrite: true,
        });
      },
      onEnter: () => timeline.play(),
      onLeave: () => timeline.play(),
      markers: false,
    });

    return timeline;
  }

  // Initialize on both DOMContentLoaded and immediate execution
  let marqueeAnimation: gsap.core.Timeline | undefined;

  function initMarquee() {
    if (marqueeAnimation) {
      marqueeAnimation.kill();
    }
    marqueeAnimation = createInfiniteMarquee();
  }

  // Immediate initialization
  initMarquee();

  // Backup initialization
  document.addEventListener("DOMContentLoaded", initMarquee);

  // Optimized resize handler
  let resizeTimer: number;
  window.addEventListener("resize", () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(initMarquee, 250);
  });
</script>

<style>
  .marquee-wrapper {
    overflow-x: clip;
    position: relative;
    display: flex;
    align-items: center;
    width: 100%;
  }

  .marquee {
    display: flex;
    white-space: nowrap;
    will-change: transform;
  }
</style>
